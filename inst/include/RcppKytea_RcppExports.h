// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppKyTea_RCPPEXPORTS_H_GEN_
#define RCPP_RcppKyTea_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppKyTea {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppKyTea", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppKyTea", "_RcppKyTea_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppKyTea");
            }
        }
    }

    inline List segment(const CharacterVector text, const std::string path) {
        typedef SEXP(*Ptr_segment)(SEXP,SEXP);
        static Ptr_segment p_segment = NULL;
        if (p_segment == NULL) {
            validateSignature("List(*segment)(const CharacterVector,const std::string)");
            p_segment = (Ptr_segment)R_GetCCallable("RcppKyTea", "_RcppKyTea_segment");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_segment(Shield<SEXP>(Rcpp::wrap(text)), Shield<SEXP>(Rcpp::wrap(path)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppKyTea_RCPPEXPORTS_H_GEN_
